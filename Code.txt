#load_data.py
import pandas as pd
from google.cloud import bigtable

client = bigtable.Client(admin=True)
instance = client.instance("ev-bigtable")
table = instance.table("ev-population")

# Load and trim dataset
df = pd.read_csv("Electric_Vehicle_Population_Data.csv")
df = df[["DOL Vehicle ID", "Make", "Model", "Model Year", "Electric Range", "City", "County"]]
df = df.dropna(subset=["DOL Vehicle ID"])
df = df.head(5000)  # Load only first 5,000 rows for testing

print(f"Uploading {len(df)} rows to Bigtable...")

for i, row_data in df.iterrows():
    try:
        row_key = str(int(row_data["DOL Vehicle ID"])).encode()
        bt_row = table.direct_row(row_key)

        bt_row.set_cell("ev_info", "make", str(row_data["Make"]).encode('utf-8'))
        bt_row.set_cell("ev_info", "model", str(row_data["Model"]).encode('utf-8'))
        bt_row.set_cell("ev_info", "model_year", str(row_data["Model Year"]).encode('utf-8'))
        bt_row.set_cell("ev_info", "electric_range", str(row_data["Electric Range"]).encode('utf-8'))
        bt_row.set_cell("ev_info", "city", str(row_data["City"]).encode('utf-8'))
        bt_row.set_cell("ev_info", "county", str(row_data["County"]).encode('utf-8'))

        bt_row.commit()

        if i % 1000 == 0:
            print(f"Uploaded {i} rows...")

    except Exception as e:
        print(f"Error inserting row {i}: {e}")

print(" Data load complte")

#app.py
from flask import Flask
from google.cloud import bigtable

app = Flask(__name__)
client = bigtable.Client(admin=True)
instance = client.instance("ev-bigtable")
table = instance.table("ev-population")

@app.route('/rows')
def count_rows():
    rows = table.read_rows()
    count = sum(1 for _ in rows)
    return str(count)

@app.route('/Best-BMW')
def best_bmw():
    rows = table.read_rows()
    count = 0
    for row in rows:
        try:
            make = row.cells['ev_info'].get('make', [])[0].value.decode('utf-8').lower()
            rng = int(row.cells['ev_info'].get('electric_range', [])[0].value.decode('utf-8'))
            if make == 'bmw' and rng > 100:
                count += 1
        except:
            continue
    return str(count)

@app.route('/tesla-owners')
def tesla_owners():
    rows = table.read_rows()
    count = 0
    for row in rows:
        try:
            make = row.cells['ev_info'].get('make', [])[0].value.decode('utf-8').lower()
            city = row.cells['ev_info'].get('city', [])[0].value.decode('utf-8').lower()
            if make == 'tesla' and city == 'seattle':
                count += 1
        except:
            continue
    return str(count)

@app.route('/update')
def update_range():
    row_key = b'257246118'
    bt_row = table.direct_row(row_key)
    bt_row.set_cell("ev_info", "electric_range", b"200")
    bt_row.commit()
    return "Success"

@app.route('/delete')
def delete_old():
    rows = table.read_rows()
    delete_keys = []
    for row in rows:
        try:
            year = int(row.cells['ev_info'].get('model_year', [])[0].value.decode('utf-8'))
            if year < 2014:
                delete_keys.append(row.row_key)
        except:
            continue

    for key in delete_keys:
        table.delete_rows(start_key=key, end_key=key + b'\x00')

    remaining = sum(1 for _ in table.read_rows())
    return str(remaining)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)
